parameters:
  - name: repository
    type: string

jobs:
- job: CheckDefaultBranch
  displayName: 'Check Default Branch'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  steps:
  - checkout: none
  - template: get-default-branch.yml
    parameters:
      repository: ${{ parameters.repository }}
      organizationUrl: $(System.CollectionUri)
      projectName: $(System.TeamProject)
  - bash: |
        echo "##vso[task.setvariable variable=defaultBranch;isOutput=true]$(defaultBranch)"
    name: SetDefaultBranch

- job: CheckPermissions
  displayName: 'Check Permissions'
  dependsOn: CheckDefaultBranch
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  variables:
    targetBranch: $[ dependencies.CheckDefaultBranch.outputs['setDefaultBranch.defaultBranch'] ]
  steps:
  - checkout: none
  - template: get-branch-permissions.yml
    parameters:
      repository: ${{ parameters.repository }}
      organizationUrl: $(System.CollectionUri)
      projectName: $(System.TeamProject)
  - bash: |
        echo "##vso[task.setvariable variable=denyForcePush;isOutput=true]$denyForcePush"
        echo "##vso[task.setvariable variable=denyEditPolicies;isOutput=true]$denyEditPolicies"
        echo "##vso[task.setvariable variable=denyBypassPR;isOutput=true]$denyBypassPR"
        echo "##vso[task.setvariable variable=denyBypassPush;isOutput=true]$denyBypassPush"
    name: SetBranchPermissionsStatus

- job: CheckPolicies
  displayName: 'Check Policies'
  dependsOn: CheckDefaultBranch
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  variables:
    targetBranch: $[ dependencies.CheckDefaultBranch.outputs['setDefaultBranch.defaultBranch'] ]
  steps:
  - checkout: none
  - template: get-branch-policies.yml
    parameters:
      repository: ${{ parameters.repository }}
      organizationUrl: $(System.CollectionUri)
      projectName: $(System.TeamProject)