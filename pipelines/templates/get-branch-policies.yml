parameters:
  - name: repository
    type: string
  - name: organizationUrl
    type: string
  - name: projectName
    type: string

steps:
  - bash: |
      echo "Default branch for repository '${{ parameters.repository }}': $(targetBranch)"
      echo "Checking policies for repository '${{ parameters.repository }}'..."
      
      set -euo pipefail

      echo "Checking policies for branch: $(targetBranch)"

      SCOPE="$(Build.Repository.ID):$(targetBranch)"
      API_URL="${{ parameters.organizationUrl }}$(System.TeamProjectId)/_apis/policy/configurations?api-version=7.1-preview.1"

      echo "API URL: $API_URL"

      http_status=$(curl -sS -o response.json -w "%{http_code}" \
        -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL" || echo "000")

      echo "HTTP Status: $http_status"

      if [[ "$http_status" == "404" ]]; then
        echo "Repository '${{ parameters.repository }}' not found in project ${{ parameters.projectName }}!"
        exit 1
      elif [[ "$http_status" != "200" ]]; then
        echo "Failed to retrieve repository policies. HTTP Status: $http_status"
        exit 1
      fi

      # echo "API Response: $(jq . response.json)"
      
      echo "Repository id: $(Build.Repository.ID)"
      filtered_policies=$(jq --arg branch "refs/heads/$(targetBranch)" --arg repoId "$(Build.Repository.ID)" '.value[] | select((.settings.scope // [] | type == "array") and (.settings.scope[]? | select(.refName == $branch and .repositoryId == $repoId)))' response.json)
      echo "Branch policies for repository '${{ parameters.repository }}': $filtered_policies"

      is_enable=$(echo "$filtered_policies" | jq '.isEnabled // empty')
      is_blocking=$(echo "$filtered_policies" | jq '.isBlocking // empty')
      min_approvers=$(echo "$filtered_policies" | jq '.settings.minimumApproverCount // empty')
      reset_approve_votes=$(echo "$filtered_policies" | jq '.settings.resetOnSourcePush // empty')
      reset_reject_votes=$(echo "$filtered_policies" | jq '.settings.resetRejectionsOnSourcePush // empty')

      echo "isEnabled: ${is_enable}" [[ "$is_enable" == "true" ]] && echo "✅ Match" || echo "❌ No match"
      echo "isBlocking: ${is_blocking}" [[ "$is_blocking" == "true" ]] && echo "✅ Match" || echo "❌ No match"
      echo "Minimum approvers: ${min_approvers}" [[ "$min_approvers" == "2" ]] && echo "✅ Match" || echo "❌ No match"
      echo "Reset approve votes on source push: ${reset_approve_votes}" [[ "$reset_approve_votes" == "true" ]] && echo "✅ Match" || echo "❌ No match"
      echo "Reset reject votes on source push: ${reset_reject_votes}" [[ "$reset_reject_votes" == "false" ]] && echo "✅ Match" || echo "❌ No match"

      
    displayName: 'Check Repository policies'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)