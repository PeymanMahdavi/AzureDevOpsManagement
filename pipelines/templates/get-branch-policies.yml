parameters:
  - name: repository
    type: string
  - name: organizationUrl
    type: string
  - name: projectName
    type: string

steps:
  - bash: |
      echo "Default branch for repository '${{ parameters.repository }}': $(targetBranch)"
      echo "Checking policies for repository '${{ parameters.repository }}'..."
      
      set -euo pipefail

      echo "Checking policies for branch: $(targetBranch)"

      SCOPE="$(Build.Repository.ID):$(targetBranch)"
      API_URL="${{ parameters.organizationUrl }}$(System.TeamProjectId)/_apis/policy/configurations?api-version=7.1-preview.1"

      echo "API URL: $API_URL"

      http_status=$(curl -sS -o response.json -w "%{http_code}" \
        -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL" || echo "000")

      echo "HTTP Status: $http_status"

      if [[ "$http_status" == "404" ]]; then
        echo "Repository '${{ parameters.repository }}' not found in project ${{ parameters.projectName }}!"
        exit 1
      elif [[ "$http_status" != "200" ]]; then
        echo "Failed to retrieve repository policies. HTTP Status: $http_status"
        exit 1
      fi

      echo "API Response: $(jq . response.json)"
      
      branch_policies=$(jq -r '.value[] | select(.settings.scopes[0].refName == "refs/heads/main") | .settings.scopes[0] | "\(.repositoryId):\(.refName)"')

      echo "Branch policies for repository '${{ parameters.repository }}': $branch_policies"

    displayName: 'Check Repository policies'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)