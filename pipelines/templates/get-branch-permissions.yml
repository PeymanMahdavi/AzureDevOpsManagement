parameters:
  - name: repository
    type: string
  - name: organizationUrl
    type: string
  - name: projectName
    type: string

steps:
  - bash: |
      echo "Default branch for repository '${{ parameters.repository }}': $(targetBranch)"
      echo "Checking permissions for repository '${{ parameters.repository }}'..."
      
      set -euo pipefail

      echo "Checking permissions for branch: $(targetBranch)"

      NAMESPACE_ID="2e9eb7ed-3c0a-47d4-87c1-0ffdd275fd87"
      SECURITY_TOKEN="repoV2/$(System.TeamProjectId)/$(Build.Repository.ID)/refs/heads/$(targetBranch)"
      API_URL="${{ parameters.organizationUrl }}/_apis/accesscontrollists/$NAMESPACE_ID?token=$SECURITY_TOKEN&api-version=7.1-preview.1&includeExtendedInfo=true"

      # echo "API URL: $API_URL"
      # echo "Security Token: $SECURITY_TOKEN"
      # echo "Namespace ID: $NAMESPACE_ID"

      http_status=$(curl -sS -o response.json -w "%{http_code}" \
        -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL" || echo "000")

      echo "HTTP Status: $http_status"

      if [[ "$http_status" == "404" ]]; then
        echo "Repository '${{ parameters.repository }}' not found in project ${{ parameters.projectName }}!"
        exit 1
      elif [[ "$http_status" != "200" ]]; then
        echo "Failed to retrieve repository permissions. HTTP Status: $http_status"
        exit 1
      fi

      # echo "API Response: $(jq . response.json)"
      
      deny_value=$(jq -r '.value[0].acesDictionary | .[] | select(.displayName? // "" | contains("Project Valid Users")) | .deny' response.json)
      deny_value=${deny_value:-0}
      # echo "Deny Value: $deny_value"

      # Bit values for each permission
      force_push_bit=16
      edit_policies_bit=4096
      bypass_pull_request_policies_bit=1024
      bypass_pushing_policies_bit=2048

      # Initialize flags
      deny_force_push=false
      deny_edit_policies=false
      deny_bypass_pr=false
      deny_bypass_push=false

      # Force Push
      if (( (deny_value & force_push_bit) == force_push_bit )); then
        echo "Force Push permission is denied to all users."
        deny_force_push=true
      else
        echo "Force Push permission is NOT explicitly denied to all users."
      fi

      # Edit Policies
      if (( (deny_value & edit_policies_bit) == edit_policies_bit )); then
        echo "Edit Policies permission is denied to all users."
        deny_edit_policies=true
      else
        echo "Edit Policies permission is NOT explicitly denied to all users."
      fi

      # Bypass Policies when completing PR
      if (( (deny_value & bypass_pull_request_policies_bit) == bypass_pull_request_policies_bit )); then
        echo "Bypass PR Policies is denied to all users."
        deny_bypass_pr=true
      else
        echo "Bypass PR Policies is NOT explicitly denied to all users."
      fi

      # Bypass Policies when pushing
      if (( (deny_value & bypass_pushing_policies_bit) == bypass_pushing_policies_bit )); then
        echo "Bypass Push Policies is denied to all users."
        deny_bypass_push=true
      else
        echo "Bypass Push Policies is NOT explicitly denied to all users."
      fi

      # Final result (you can reuse these later)
      echo "Final Deny Booleans:"
      echo "deny_force_push: $deny_force_push"
      echo "deny_edit_policies: $deny_edit_policies"
      echo "deny_bypass_pr: $deny_bypass_pr"
      echo "deny_bypass_push: $deny_bypass_push"

      echo "Permissions check completed successfully."

      # Export values
      echo "##vso[task.setvariable variable=denyForcePush]$deny_force_push"
      echo "##vso[task.setvariable variable=denyEditPolicies]$deny_edit_policies"
      echo "##vso[task.setvariable variable=denyBypassPR]$deny_bypass_pr"
      echo "##vso[task.setvariable variable=denyBypassPush]$deny_bypass_push"
    displayName: 'Check Repository Permissions'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)